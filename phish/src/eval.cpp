#include "eval.hpp"

static const int MATERIAL[6] = { 100, 320, 330, 500, 900, 20000 };

static const int PST_MG[6][64] = {
    // PAWN
    {
        0, 0, 0, 0, 0, 0, 0, 0,
        5, 10, 10, -20, -20, 10, 10, 5,
        5, -5, -10, 0, 0, -10, -5, 5,
        0, 0, 0, 20, 20, 0, 0, 0,
        5, 5, 10, 25, 25, 10, 5, 5,
        10, 10, 20, 30, 30, 20, 10, 10,
        50, 50, 50, 50, 50, 50, 50, 50,
        0, 0, 0, 0, 0, 0, 0, 0
    },
    // KNIGHT
    {
        -50,-40,-30,-30,-30,-30,-40,-50,
        -40,-20, 0, 0, 0, 0,-20,-40,
        -30, 0, 10, 15, 15, 10, 0,-30,
        -30, 5, 15, 20, 20, 15, 5,-30,
        -30, 0, 15, 20, 20, 15, 0,-30,
        -30, 5, 10, 15, 15, 10, 5,-30,
        -40,-20, 0, 5, 5, 0,-20,-40,
        -50,-40,-30,-30,-30,-30,-40,-50
    },
    // BISHOP
    {
        -20,-10,-10,-10,-10,-10,-10,-20,
        -10, 5, 0, 0, 0, 0, 5,-10,
        -10, 10, 10, 10, 10, 10, 10,-10,
        -10, 0, 10, 10, 10, 10, 0,-10,
        -10, 5, 5, 10, 10, 5, 5,-10,
        -10, 0, 5, 10, 10, 5, 0,-10,
        -10, 0, 0, 0, 0, 0, 0,-10,
        -20,-10,-10,-10,-10,-10,-10,-20
    },
    // ROOK
    {
        0, 0, 5, 10, 10, 5, 0, 0,
        -5, 0, 0, 0, 0, 0, 0,-5,
        -5, 0, 0, 0, 0, 0, 0,-5,
        -5, 0, 0, 0, 0, 0, 0,-5,
        -5, 0, 0, 0, 0, 0, 0,-5,
        -5, 0, 0, 0, 0, 0, 0,-5,
        5, 10, 10, 10, 10, 10, 10, 5,
        0, 0, 0, 0, 0, 0, 0, 0
    },
    // QUEEN
    {
        -20,-10,-10,-5,-5,-10,-10,-20,
        -10, 0, 0, 0, 0, 0, 0,-10,
        -10, 0, 5, 5, 5, 5, 0,-10,
        -5, 0, 5, 5, 5, 5, 0,-5,
        0, 0, 5, 5, 5, 5, 0,-5,
        -10, 5, 5, 5, 5, 5, 0,-10,
        -10, 0, 5, 0, 0, 0, 0,-10,
        -20,-10,-10,-5,-5,-10,-10,-20
    },
    // KING MG
    {
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -20,-30,-30,-40,-40,-30,-30,-20,
        -10,-20,-20,-20,-20,-20,-20,-10,
        20, 20, 0, 0, 0, 0, 20, 20,
        20, 30, 10, 0, 0, 10, 30, 20
    }
};

static const int PST_EG[6][64] = {
    // PAWN EG
    {
        0, 0, 0, 0, 0, 0, 0, 0,
        5, 10, 10, -20, -20, 10, 10, 5,
        5, -5, -10, 0, 0, -10, -5, 5,
        0, 0, 0, 20, 20, 0, 0, 0,
        5, 5, 10, 25, 25, 10, 5, 5,
        10, 10, 20, 30, 30, 20, 10, 10,
        50, 50, 50, 50, 50, 50, 50, 50,
        0, 0, 0, 0, 0, 0, 0, 0
    },
    // KNIGHT EG
    {
        -50,-40,-30,-30,-30,-30,-40,-50,
        -40,-20, 0, 0, 0, 0,-20,-40,
        -30, 0, 10, 15, 15, 10, 0,-30,
        -30, 5, 15, 20, 20, 15, 5,-30,
        -30, 0, 15, 20, 20, 15, 0,-30,
        -30, 5, 10, 15, 15, 10, 5,-30,
        -40,-20, 0, 5, 5, 0,-20,-40,
        -50,-40,-30,-30,-30,-30,-40,-50
    },
    // BISHOP EG
    {
        -20,-10,-10,-10,-10,-10,-10,-20,
        -10, 5, 0, 0, 0, 0, 5,-10,
        -10, 10, 10, 10, 10, 10, 10,-10,
        -10, 0, 10, 10, 10, 10, 0,-10,
        -10, 5, 5, 10, 10, 5, 5,-10,
        -10, 0, 5, 10, 10, 5, 0,-10,
        -10, 0, 0, 0, 0, 0, 0,-10,
        -20,-10,-10,-10,-10,-10,-10,-20
    },
    // ROOK EG
    {
        0, 0, 5, 10, 10, 5, 0, 0,
        -5, 0, 0, 0, 0, 0, 0,-5,
        -5, 0, 0, 0, 0, 0, 0,-5,
        -5, 0, 0, 0, 0, 0, 0,-5,
        -5, 0, 0, 0, 0, 0, 0,-5,
        -5, 0, 0, 0, 0, 0, 0,-5,
        5, 10, 10, 10, 10, 10, 10, 5,
        0, 0, 0, 0, 0, 0, 0, 0
    },
    // QUEEN EG
    {
        -20,-10,-10,-5,-5,-10,-10,-20,
        -10, 0, 0, 0, 0, 0, 0,-10,
        -10, 0, 5, 5, 5, 5, 0,-10,
        -5, 0, 5, 5, 5, 5, 0,-5,
        0, 0, 5, 5, 5, 5, 0,-5,
        -10, 5, 5, 5, 5, 5, 0,-10,
        -10, 0, 5, 0, 0, 0, 0,-10,
        -20,-10,-10,-5,-5,-10,-10,-20
    },
    // KING EG
    {
        -50,-40,-30,-20,-20,-30,-40,-50,
        -30,-20,-10, 0, 0,-10,-20,-30,
        -30,-10, 20, 30, 30, 20,-10,-30,
        -30,-10, 30, 40, 40, 30,-10,-30,
        -30,-10, 30, 40, 40, 30,-10,-30,
        -30,-10, 20, 30, 30, 20,-10,-30,
        -30,-30, 0, 0, 0, 0,-30,-30,
        -50,-40,-30,-20,-20,-30,-40,-50
    }
};

static inline int pst(int color, int pieceType, int sq, bool endgame) {
    int s = color == WHITE ? sq : (63 - sq);
    return endgame ? PST_EG[pieceType][s] : PST_MG[pieceType][s];
}

int evaluate(const Board &board) {
    // Simple material + PST tapered eval by total material
    int mg = 0, eg = 0;
    int totalNonKing = 0;
    for (int c = 0; c < 2; ++c) {
        for (int pt = 0; pt < 6; ++pt) {
            Bitboard bb = board.piece_bb(static_cast<Color>(c), static_cast<PieceType>(pt));
            while (bb) {
                int s = pop_lsb(bb);
                int val = MATERIAL[pt];
                if (pt != KING) totalNonKing += val;
                int addMg = val + pst(c, pt, s, false);
                int addEg = val + pst(c, pt, s, true);
                if (c == WHITE) { mg += addMg; eg += addEg; }
                else { mg -= addMg; eg -= addEg; }
            }
        }
    }
    int phase = std::min(256, totalNonKing * 256 / (MATERIAL[QUEEN]*2 + MATERIAL[ROOK]*4 + MATERIAL[BISHOP]*4 + MATERIAL[KNIGHT]*4 + MATERIAL[PAWN]*16));
    int score = (mg * phase + eg * (256 - phase)) / 256;
    return board.side_to_move() == WHITE ? score : -score;
}